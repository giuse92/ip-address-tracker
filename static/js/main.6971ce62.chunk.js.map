{"version":3,"sources":["images/icon-location.svg","images/icon-arrow.svg","components/Error.js","App.js","reportWebVitals.js","index.js"],"names":["Error","message","className","App","useState","error","setError","isLoaded","setIsLoaded","ipData","setIpData","inputValue","setInputValue","newMapIcon","L","icon","iconUrl","logoLocation","iconSize","getIp","apiUrl","a","fetch","promise","json","res","code","useEffect","process","addOffsetValue","timezone","date","Date","apiTimezoneOffset","parseInt","replace","UTCTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","disabled","placeholder","type","onChange","e","newValue","target","value","onClick","preventDefault","src","iconArrow","alt","messages","ip","location","city","region","getHours","getMinutes","isp","MapContainer","center","lat","lng","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","class","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6971ce62.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-location.7e6459d2.svg\";","export default __webpack_public_path__ + \"static/media/icon-arrow.2eaaa5ee.svg\";","import React from \"react\";\r\nimport \"./Error.css\";\r\n\r\nconst Error = ({ message }) => {\r\n  return <span className=\"error\">Error: {message}</span>;\r\n};\r\n\r\nexport default Error;\r\n","import { useState, useEffect } from \"react\";\r\nimport logoLocation from \"./images/icon-location.svg\";\r\nimport iconArrow from \"./images/icon-arrow.svg\";\r\nimport L from \"leaflet\";\r\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\";\r\nimport \"./App.css\";\r\nimport Error from \"./components/Error\";\r\n\r\nfunction App() {\r\n  const [error, setError] = useState(false);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [ipData, setIpData] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const newMapIcon = L.icon({ iconUrl: logoLocation, iconSize: [46, 56] });\r\n\r\n  const getIp = async (apiUrl) => {\r\n    try {\r\n      const promise = await fetch(apiUrl);\r\n      const res = await promise.json();\r\n      setIpData(res);\r\n      if (res.code) throw new Error(\"Error\");\r\n    } catch (e) {\r\n      setError(true);\r\n    } finally {\r\n      setIsLoaded(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getIp(\r\n      `https://geo.ipify.org/api/v1?apiKey=${process.env.REACT_APP_API_KEY}&ipAddress=`\r\n    );\r\n  }, []);\r\n\r\n  const onChangeHandler = (e) => {\r\n    const newValue = e.target.value;\r\n    setInputValue(newValue);\r\n  };\r\n\r\n  const getDomainOrIp = (e) => {\r\n    e.preventDefault();\r\n    setError(false);\r\n    setIsLoaded(false);\r\n    getIp(\r\n      `https://geo.ipify.org/api/v1?apiKey=${process.env.REACT_APP_API_KEY}&domain=${inputValue}`\r\n    );\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  const addOffsetValue = (timezone) => {\r\n    const date = new Date();\r\n    const apiTimezoneOffset = parseInt(timezone.replace(\":\", \".\")) * 60;\r\n    const UTCTime = new Date(\r\n      date.getUTCFullYear(),\r\n      date.getUTCMonth(),\r\n      date.getUTCDate(),\r\n      date.getUTCHours(),\r\n      date.getUTCMinutes(),\r\n      date.getUTCSeconds()\r\n    );\r\n    const newUTCDate = new Date(UTCTime * 1 + apiTimezoneOffset * 60 * 1000);\r\n    return newUTCDate;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"search-ip\">\r\n        <h1>IP Address Tracker</h1>\r\n        <form>\r\n          <input\r\n            disabled={!isLoaded}\r\n            placeholder=\"Search for any IP address or domain\"\r\n            type=\"text\"\r\n            onChange={onChangeHandler}\r\n            value={inputValue}\r\n          />\r\n          <button disabled={!isLoaded} onClick={getDomainOrIp}>\r\n            <img src={iconArrow} alt=\"icon-arrow\" />\r\n          </button>\r\n        </form>\r\n        <div className=\"show-tracker-data\">\r\n          {error ? (\r\n            <Error message={`${ipData.messages}`} />\r\n          ) : (\r\n            <ul>\r\n              <li>\r\n                <div>\r\n                  <h4 className=\"data-key\">IP Address</h4>\r\n                  <p className=\"data-value\">\r\n                    {isLoaded ? ipData.ip : \"Loading...\"}\r\n                  </p>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div>\r\n                  <h4 className=\"data-key\">Location</h4>\r\n                  <p className=\"data-value\">\r\n                    {isLoaded\r\n                      ? `${ipData.location.city}, ${ipData.location.region}`\r\n                      : \"Loading...\"}\r\n                  </p>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div>\r\n                  <h4 className=\"data-key\">Timezone</h4>\r\n                  <p className=\"data-value\">\r\n                    {isLoaded\r\n                      ? `${addOffsetValue(\r\n                          ipData.location.timezone\r\n                        ).getHours()}:${addOffsetValue(\r\n                          ipData.location.timezone\r\n                        ).getMinutes()}`\r\n                      : \"Loading...\"}\r\n                    {/*add offset value dynamically using the API*/}\r\n                  </p>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div>\r\n                  <h4 className=\"data-key\">ISP</h4>\r\n                  <p className=\"data-value\">\r\n                    {isLoaded ? ipData.isp : \"Loading...\"}\r\n                  </p>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {isLoaded ? (\r\n        <MapContainer\r\n          center={\r\n            error ? [51.505, -0.09] : [ipData.location.lat, ipData.location.lng]\r\n          }\r\n          zoom={13}\r\n          scrollWheelZoom={false}\r\n        >\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {!error ? (\r\n            <Marker\r\n              icon={newMapIcon}\r\n              position={[ipData.location.lat, ipData.location.lng]}\r\n            ></Marker>\r\n          ) : null}\r\n        </MapContainer>\r\n      ) : (\r\n        \"Loading map...\"\r\n      )}\r\n      <footer>\r\n        <div class=\"attribution\">\r\n          Challenge by\r\n          <a\r\n            href=\"https://www.frontendmentor.io?ref=challenge\"\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            Frontend Mentor\r\n          </a>\r\n          . Coded by <a href=\"https://github.com/giuse92\">giuse92</a>.\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nrequire(\"dotenv\").config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}